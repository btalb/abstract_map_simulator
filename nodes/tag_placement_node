#!/usr/bin/env python

import math
import os
import pyautogui as pag
import rospy
import sys
import tf

import geometry_msgs.msg as geometry_msgs
import visualization_msgs.msg as visualization_msgs

from human_cues_tag_simulator import tags

try:
    input = raw_input
except NameError:
    pass

OUTPUT_FILENAME = "tags.txt"

CLICK_TOPIC = "/move_base_simple/goal"
MARKER_TOPIC = "/tag_markers"

pub_markers = None
tag_list = []


def callbackClick(msg):
    """Callback for whenever a pose is published on the "click event" topic"""
    global pub_markers, tag_list

    # Process the event
    rospy.loginfo("Creation event received. Handling:")
    r, p, y = tf.transformations.euler_from_quaternion(
        (msg.pose.orientation.x, msg.pose.orientation.y, msg.pose.orientation.z,
         msg.pose.orientation.w))
    y_deg = y * 180 / math.pi
    print("\ttag creation requested @ (%f,%f), facing %f deg" %
          (msg.pose.position.x, msg.pose.position.y, y_deg))
    valid = False
    while not valid:
        next_id = tags.nextTagID()
        print(
            "\tSpecify tag ID number (#%d if empty, 'x' to skip):" % (next_id))
        windowSwap()
        user_in = input().strip()
        valid = True
        if not user_in:
            tag_id = next_id
        elif user_in == 'x':
            tag_id = None
        else:
            try:
                tag_id = int(user_in)
            except ValueError:
                tag_id = None
                valid = False

    # Exit the event with the result
    if tag_id is None:
        print("\tNo tag was selected, event discarded")
    else:
        tag_list.append((tag_id, msg.pose.position.x, msg.pose.position.y,
                         y_deg))
        tags.publishTagMarkers(tag_list, pub_markers)
        print("\t%s" % (tags.tag2String(tag_list[-1])))
    print("Listening for next tag...")


def main(fn_in, fn_out):
    """Main function for running the node"""
    global pub_markers, tag_list

    # Initialise all of the ROS side
    rospy.init_node("tag_placement_node")
    rospy.Subscriber(CLICK_TOPIC, geometry_msgs.PoseStamped, callbackClick)
    pub_markers = rospy.Publisher(
        MARKER_TOPIC, visualization_msgs.MarkerArray, queue_size=10)

    # Attempt to load a tags file if supplied
    if fn_in is not None:
        tag_list = tags.loadTags(fn_in)

    # Run through the tag creation process
    rospy.loginfo("Listening for tag creation events:")
    rospy.spin()

    # We have exited, write the result
    tags.writeTags(fn_out)


def windowSwap():
    """Toggles the active window by sending ALT+TAB combo"""
    pag.keyDown('alt')
    pag.typewrite(['tab'])
    pag.keyUp('alt')


if __name__ == '__main__':
    rospy.loginfo("Starting Tag Placement Node with:")
    if len(sys.argv) > 2:
        err = "Too many arguments provided (%d)" % (len(sys.argv))
        rospy.logerr(err)
        raise ValueError(err)
    if len(sys.argv) > 1:
        fn_in = os.path.abspath(sys.argv[1])
    else:
        fn_in = None
    fn_out = os.path.abspath(OUTPUT_FILENAME)
    rospy.loginfo("\tInput Tags File:\t%s" % ("None"
                                              if fn_in is None else fn_in))
    rospy.loginfo("\tOutput Tags File:\t%s" % (fn_out))
    main(fn_in, fn_out)
